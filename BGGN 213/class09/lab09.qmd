---
title: "lab09"
author: "Liz Chamiec-Case"
format: pdf
editor: visual
---

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
# view dataframe
wisc.df
```

```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]

# Create diagnosis vector for later 
diagnosis <- wisc.df[,1]
```

Q1. How many observations are in this dataset?

```{r}
print(paste('there are',nrow(wisc.data),'observations (patients) in the dataset'))
```

Q2. How many of the observations have a malignant diagnosis?

```{r}
print(paste('there are',sum(diagnosis == 'M'),'observations with malignant diagnoses'))
```

Q3. How many variables/features in the data are suffixed with \_mean?

```{r}
features <- colnames(wisc.data)
print(paste('there are',length(features[grep("_mean", features)]),'features in the data are suffixed with _mean'))
```

## PCA

```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```

```{r}
# Perform PCA on wisc.data by completing the following code
#wisc.pr <- prcomp( scale(wisc.data) )
wisc.pr <- prcomp(wisc.data, scale=T)
summary(wisc.pr)
```

Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.3%

Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3

Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7

```{r}
# create a bipolot of the PCA data
biplot(wisc.pr)
```

Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

There is too much data on this plot, which is making the plot overcrowded and difficult to understand.

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x[, c(1,2) ], col=as.factor(diagnosis), xlab = "PC1", ylab = "PC2")
```

Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Scatter plot observations by components 1 and 3
plot( wisc.pr$x[, c(1,3) ], col=as.factor(diagnosis), xlab = "PC1", ylab = "PC2")
```

While both plots segregate by the diagnoses, using PC2 instead of PC3 makes the division more clean. This is likely because more variance is captured in PC2 than PC3. It seems, though that PC1 is pulling most of the weight in terms of separating the groups, which makes sense since it contains the most variance.

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

VARIANCE

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```

```{r}
# Variance explained by each principal component: pve
pve <- pr.var / sum(pr.var)

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```

```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```

```{r}
## ggplot based graph
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)
```

Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr\$rotation\[,1\]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation['concave.points_mean',1]
```

Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
print(paste('we need',which.max(cumsum(pve) >= 0.8),'PCs to explain 80% of the variance of the data'))
```

## Hierarchical Clustering

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)
data.dist <- dist(data.scaled,method='euclidean')
wisc.hclust <- hclust(data.dist, method='complete')
```

Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
plot(wisc.hclust)
abline(h=20, col="red", lty=2)
```

The model has 4 clusters at height 20

SELECTING NUMBER OF CLUSTERS

```{r}
# cutting tree to have 4 clusters
wisc.hclust.clusters <- cutree(wisc.hclust,k=4)
table(wisc.hclust.clusters, diagnosis)
```

Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
# experimenting with cutting tree to have between 2 and 10 clusters
for (x in 2:10) {
  wisc.hclust.clusters <- cutree(wisc.hclust,k=x)
  print(table(wisc.hclust.clusters, diagnosis))
}

```

I would go with 5 clusters here

```{r}
# cutting tree to have 5 clusters
wisc.hclust.clusters <- cutree(wisc.hclust,k=5)
table(wisc.hclust.clusters, diagnosis)
```

USING DIFFERENT METHODS

Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}
# testing different hierarchical clustering methods: single

wisc.hclust.single <- hclust(data.dist, method='single')
wisc.hclust.single.clusters <- cutree(wisc.hclust.single,k=5)
plot(wisc.hclust.single)
table(wisc.hclust.single.clusters, diagnosis)

# the dendrogram looks weird and this does a terrible job of separating the diagnoses
```

```{r}
# testing different hierarchical clustering methods: complete

wisc.hclust.complete <- hclust(data.dist, method='complete')
wisc.hclust.complete.clusters <- cutree(wisc.hclust.complete,k=5)
plot(wisc.hclust.complete)
table(wisc.hclust.complete.clusters, diagnosis)

# the baseline. does a fine job
```

```{r}
# testing different hierarchical clustering methods: average

wisc.hclust.average <- hclust(data.dist, method='average')
wisc.hclust.average.clusters <- cutree(wisc.hclust.average,k=5)
plot(wisc.hclust.average)
table(wisc.hclust.average.clusters, diagnosis)

# dendrogram looks a lot better than single but still is very left-skewed and also does a terrible job of separating diagneses. would need to optimize
```

```{r}
# testing different hierarchical clustering methods: ward.D2

wisc.hclust.ward.D2 <- hclust(data.dist, method='ward.D2')
wisc.hclust.ward.D2.clusters <- cutree(wisc.hclust.ward.D2,k=2)
plot(wisc.hclust.ward.D2)
table(wisc.hclust.ward.D2.clusters, diagnosis)

# this might be my favorite because the dendrogram is the prettiest (read: more even splitting of data from higher clusters). needs some optimizing to be better at separating the diagnoses
```

## Combining Methods

CLUSTERING ON PCA RESULTS

```{r}
# hierarchical clustering to get 90% variance

wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]),method="ward.D2")

grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
table(grps, diagnosis)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=as.factor(diagnosis))
```

```{r}
g <- as.factor(grps)
levels(g)
g <- relevel(g,2)
levels(g)

# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```

```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[, 1:7]), method="ward.D2")

wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

Q13. How well does the newly created model with four clusters separate out the two diagnoses?

```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```

Q14. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km\$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

```{r}
# table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters,diagnosis)
```

## Prediction

```{r}
# project new data onto PCA space
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
```

```{r}
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

Q16. Which of these new patients should we prioritize for follow up based on your results?

Based on these results, we should prioritize patient patient 2 (M is red, B is black)
