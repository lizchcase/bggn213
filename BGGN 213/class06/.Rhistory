print(avg.grade)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name)
for (i in 1:nrow(file)) {
student <- file[i,2:6]
student[is.na(student)] <- 0
avg.grade <- mean(student[order(student)][2:(length(student))])
#print(avg.grade)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name)
for (i in 1:nrow(file)) {
student <- file[i,2:6]
student[is.na(student)] <- 0
avg.grade <- student[order(student)][2:(length(student))]
#print(avg.grade)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name)
for (i in 1:nrow(file)) {
student <- file[i,2:6]
student[is.na(student)] <- 0
student <- as.matrix(student)
avg.grade <- mean(student[order(student)][2:(length(student))])
#print(avg.grade)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name)
for (i in 1:nrow(file)) {
student <- file[i,2:6]
student[is.na(student)] <- 0
student <- as.matrix(student)
avg.grade <- mean(student[order(student)][2:(length(student))])
student <- data.frame(student)
print(avg.grade)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name)
for (i in 1:nrow(file)) {
student <- file[i,2:6]
student[is.na(student)] <- 0
student <- as.matrix(student)
avg.grade <- mean(student[order(student)][2:(length(student))])
student <- data.frame(student)
file[i,"avg grade"] <- avg.grade
#print(avg.grade)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
file
grade <- function(file.name)
file <- read.csv(file.name)
for (i in 1:nrow(file)) {
student <- file[i,2:6]
student[is.na(student)] <- 0
student <- as.matrix(student)
avg.grade <- mean(student[order(student)][2:(length(student))])
student <- data.frame(student)
file[i,"avg grade"] <- avg.grade
}
print(file)
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg grade"] <- avg.grade # puts the average grade in a new column
}
print(file) # prints finished dataframe with avg grades
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# this function drops the lowest score from a vector and then finds the average grade
grade <- function(student) {
student[is.na(student)] <- 0
avg.grade <- mean(student[order(student)][2:(length(student))])
return(avg.grade)
}
grade(student)
# this function drops the lowest score from a vector and then finds the average grade
grade <- function(student) {
student <- student[is.na(student)] <- 0
student <- as.matrix(student)
avg.grade <- mean(student[order(student)][2:(length(student))])
return(avg.grade)
}
grade(student)
# this function drops the lowest score from a vector and then finds the average grade
grade <- function(student) {
student <- student[is.na(student)] <- 0
student <- as.matrix(student)
avg.grade <- mean(student[order(student)][2:(length(student))])
return(avg.grade)
}
grade(student1)
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file) # prints finished dataframe with avg grades
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# question 2:
max(gradebook$avg.grade)
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# question 2:
max(gradebook$avg.grade)
# question 2:
max(gradebook['avg.grade']
# question 2:
max(gradebook['avg.grade'])
# question 2:
maximum(gradebook['avg.grade'])
# question 2:
max(gradebook['avg.grade'])
# question 2:
max(gradebook)
# question 2:
max(gradebook[["avg.grade"]])
# question 2:
gradebook[["avg.grade"]]
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# question 2:
gradebook[["avg.grade"]]
# question 2:
gradebook[["avg grade"]]
gradebook <- as.matrix(gradebook)
# question 2:
gradebook[["avg grade"]]
# question 2:
gradebook["avg grade"]
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file) # prints finished dataframe with avg grades
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# question 2:
gradebook$avg.grade
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# question 2:
gradebook
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
return(file) # prints finished dataframe with avg grades
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
print(grade("C:/Users/echamieccase/Desktop/student_homework.csv"))
return(file)
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
return(file)
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
return(file)
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
print(grade("C:/Users/echamieccase/Desktop/student_homework.csv"))
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name)
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
file <- read.csv(file.name)
file.name <- "C:/Users/echamieccase/Desktop/student_homework.csv"
file <- read.csv(file.name)
nrow(file)
file.name <- "C:/Users/echamieccase/Desktop/student_homework.csv"
file <- read.csv(file.name)
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
grade <- function(file.name) {
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
grade <- function(file.name) {
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
# question 2:
gradebook[["avg.grade"]]
# question 2:
max(gradebook[["avg.grade"]])
# question 2:
gradebook[max(gradebook[["avg.grade"]])]
# question 2:
max(gradebook[["avg.grade"]])
# question 2:
which.max(gradebook[["avg.grade"]])
# question 2:
print(join('student',which.max(gradebook[["avg.grade"]])))
# question 2:
which.max(gradebook[["avg.grade"]]))
# question 2:
which.max(gradebook[["avg.grade"]])
gradebook[["X",max.index]]
# question 2:
max.index <- which.max(gradebook[["avg.grade"]])
gradebook[["X",max.index]]
# question 2:
max.index <- which.max(gradebook[["avg.grade"]])
# question 2:
which.max(gradebook[["avg.grade"]])
mean(gradebook[['hw1','hw2','hw3','hw4','hw5']])
gradebook[["hw1",'hw2','hw3','hw4','hw5']]
mean(gradebook$hw1)
which.min(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5))
mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5)
min(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5))
list(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5))
gradebook[is.na(gradebook)] <- 0
list(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5))
which.min(list(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5)))
# question 2:
which.max(gradebook[["avg.grade"]])
# question 2 (student with highest grade):
print(paste('student',which.max(gradebook[["avg.grade"]])))
# question 3 (homework with lowest score):
print(paste('homework',which.min(list(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5)))))
grade <- function(file.name) {
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook <- gradebook[is.na(gradebook)] <- 0
# question 2 (student with highest grade):
print(paste('student',which.max(gradebook[["avg.grade"]])))
gradebook
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook[is.na(gradebook)] <- 0
# question 2 (student with highest grade):
print(paste('student',which.max(gradebook[["avg.grade"]])))
grade <- function(file.name) {
file <- read.csv(file.name) # read in the gradebook csv file
for (i in 1:nrow(file)) { # loop through the students
student <- file[i,2:6] # isolate grades in a vector w/o col X
student[is.na(student)] <- 0 # make NA values into a 0
student <- as.matrix(student) # made into a matrix to avoid order error
avg.grade <- mean(student[order(student)][2:(length(student))])
# avg. grade puts the grades in order then removes the first (lowest) grade
# and averages the rest, storing this value in avg.grade
student <- data.frame(student) # converts bac into a dataframe
file[i,"avg.grade"] <- avg.grade # puts the average grade in a new column
}
print(file)
}
grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook <- grade("C:/Users/echamieccase/Desktop/student_homework.csv")
gradebook[is.na(gradebook)] <- 0
# question 2 (student with highest grade):
print(paste('student',which.max(gradebook[["avg.grade"]])))
# question 3 (homework with lowest score):
print(paste('homework',which.min(list(mean(gradebook$hw1),mean(gradebook$hw2),mean(gradebook$hw3),mean(gradebook$hw4),mean(gradebook$hw5)))))
library(ggplot2)
ggplot(cars)
ggplot(cars) +
aes(x=speed, y=dist) +
geom_point()
ggplot(cars) +
aes(x=speed, y=dist) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(title='Speeds and Distances of Cars',xlab='Speed',ylab='Distance')
# gene regulation data
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
number.genes <- nrow(genes) # 5196 genes
num.cols <- ncol(genes) # 4 columns
col.names <- colnames(genes)
state <- table(genes$State) # 127 upregulated genes
frac.upregulated <- round(state[3]/number.genes*100, 2) # 2.44% of genes are upregulated
ggplot(genes,aes(x=Condition1,y=Condition2,color=State)) +
geom_point() +
scale_colour_manual( values=c("blue","gray","red") ) +
labs(title='Gene Expression Changes Upon Drug Treatment',xlab='Control (No Drug)',ylab='Drug Treatment',legend='right')
library(gapminder)
library(gganimate)
library(gifski)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
shadow_wake(wake_length = 0.1, alpha = FALSE)
library(ggplot2)
ggplot(cars)
ggplot(cars) +
aes(x=speed, y=dist) +
geom_point()
ggplot(cars) +
aes(x=speed, y=dist) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(title='Speeds and Distances of Cars',xlab='Speed',ylab='Distance')
# gene regulation data
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
number.genes <- nrow(genes) # 5196 genes
num.cols <- ncol(genes) # 4 columns
col.names <- colnames(genes)
state <- table(genes$State) # 127 upregulated genes
frac.upregulated <- round(state[3]/number.genes*100, 2) # 2.44% of genes are upregulated
ggplot(genes,aes(x=Condition1,y=Condition2,color=State)) +
geom_point() +
scale_colour_manual( values=c("blue","gray","red") ) +
labs(title='Gene Expression Changes Upon Drug Treatment',xlab='Control (No Drug)',ylab='Drug Treatment',legend='right')
library(gapminder)
library(dplyr)
gapminder.url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(gapminder.url)
gapminder.2007 <- gapminder %>%
filter(year==2007)
ggplot(gapminder.2007) +
aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
geom_point(alpha=0.4)
# plot for 1957
gapminder.1957 <- gapminder %>%
filter(year == 1957)
ggplot(gapminder.1957,aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)) +
geom_point(alpha=0.7) +
scale_size_area(max_size=15)
# 1957 and 2007
gapminder.1957.2007 <- gapminder %>%
filter(year==1957 | year==2007)
ggplot(gapminder.1957.2007) +
geom_point(aes(x = gdpPercap, y = lifeExp, color=continent, size = pop), alpha=0.7) +
scale_size_area(max_size = 10) +
facet_wrap(~year)
gapminder_top5 <- gapminder %>%
filter(year==2007) %>%
arrange(desc(pop)) %>%
top_n(5, pop)
ggplot(gapminder_top5, aes(x = reorder(country, -pop), y = pop, fill = lifeExp)) +
geom_col(col="gray30") +
guides(fill=FALSE)
# flip bar chart
State <- rownames(USArrests)
ggplot(USArrests) +
aes(x=reorder(State,Murder), y=Murder) +
geom_point() +
geom_segment(aes(x=State,
xend=State,
y=0,
yend=Murder), color="blue") +
coord_flip()
library(gapminder)
library(gganimate)
library(gifski)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
shadow_wake(wake_length = 0.1, alpha = FALSE)
library(patchwork)
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))
(p1 | p2 | p3) /
p4
