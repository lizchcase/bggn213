url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
print(paste('there are ',nrows(x)))
print(paste('there are ',numrows(x)))
print(paste('there are ',nrow(x)))
print(paste('there are',nrow(x),'rows'))
print(paste('there are',nrow(x),'rows and',ncol(x),'columns'))
# preview the first 6 rows
head(x,6)
# Note how the minus indexing works
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
dim(x)
x <- read.csv(url, row.names=1)
head(x)
head(x)
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
?barplot
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
pairs(x, col=rainbow(10), pch=16)
?pairs
# Use the prcomp() PCA function
pca <- prcomp( t(x) )
summary(pca)
# Plot PC1 vs PC2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x))
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x), col=rainbow(nrow(x)))
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x), col=rainbow(10))
text(pca$x[,1], pca$x[,2], colnames(x), col=rainbow(nrow(x)))
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500))
text(pca$x[,1], pca$x[,2], colnames(x), col=rainbow(nrow(x)))
# loadings plot for pc2
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )
# load and view data
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
print(paste('there are',nrow(rna.data),'genes and',ncol(rna.data),'samples'))
# pca and plot results
## Again we have to take the transpose of our data
pca <- prcomp(t(rna.data), scale=TRUE)
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
summary(pca)
# scree plot
plot(pca, main="Quick scree plot")
## Variance captured per PC
pca.var <- pca$sdev^2
## Percent variance is often more informative to look at
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
barplot(pca.var.per, main="Scree Plot",
names.arg = paste0("PC", 1:10),
xlab="Principal Component", ylab="Percent Variation")
## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"
plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
xlab=paste0("PC1 (", pca.var.per[1], "%)"),
ylab=paste0("PC2 (", pca.var.per[2], "%)"))
text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
library(ggplot2)
df <- as.data.frame(pca$x)
# Our first basic plot
ggplot(df) +
aes(PC1, PC2) +
geom_point()
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data)
df$condition <- substr(colnames(rna.data),1,2)
p <- ggplot(df) +
aes(PC1, PC2, label=samples, col=condition) +
geom_label(show.legend = FALSE)
p
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data)
df$condition <- substr(colnames(rna.data),1,2)
p <- ggplot(df) +
aes(PC1, PC2, label=samples, col=condition) +
geom_label(show.legend = FALSE)
p + labs(title="PCA of RNASeq Data",
subtitle = "PC1 clealy seperates wild-type from knock-out samples",
x=paste0("PC1 (", pca.var.per[1], "%)"),
y=paste0("PC2 (", pca.var.per[2], "%)"),
caption="BIMM143 example data") +
theme_bw()
p
# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data)
df$condition <- substr(colnames(rna.data),1,2)
p <- ggplot(df) +
aes(PC1, PC2, label=samples, col=condition) +
geom_label(show.legend = FALSE)
p + labs(title="PCA of RNASeq Data",
subtitle = "PC1 clealy seperates wild-type from knock-out samples",
x=paste0("PC1 (", pca.var.per[1], "%)"),
y=paste0("PC2 (", pca.var.per[2], "%)"),
caption="BIMM143 example data") +
theme_bw()
loading_scores <- pca$rotation[,1]
## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores)
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)
## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes
