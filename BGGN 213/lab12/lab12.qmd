---
title: "lab12"
format: pdf
editor: visual
---

```{r}
install.packages('BiocManager', repos = "http://cran.us.r-project.org")
# install.packages("BiocManager")
BiocManager::install()
BiocManager::install("DESeq2")
library(BiocManager)
library(DESeq2)
```

```{r}
# load data and metadata
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")

metadata
```

Q1. How many genes are in this dataset?

38,694

Q2. How many 'control' cell lines do we have?

```{r}
sum(metadata$dex == "control")
```

Q3. How would you make the above code in either approach more robust?

The divisor to compute control.mean is hard coded in - let's change that so the code will still apply if more control samples are added

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/ sum(metadata$dex == "control") 
head(control.mean)
```

Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ ,treated$id]
treated.mean <- rowSums( treated.counts )/ sum(metadata$dex == "treated") 
head(treated.mean)
```

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(control.mean,treated.mean)
```

Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

geom_point()

```{r}
library(ggplot2)
ggplot(meancounts,aes(x=control.mean,y=treated.mean)) +
  geom_point() +
  scale_x_continuous(trans="log2") +
  scale_y_continuous(trans="log2")
```

```{r}
# add log2foldchange to meancounts
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
# get rid of genes with value 0 for log

zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

Setting arr.ind to TRUE makes the function return array indices when an array is passed through

We then use the unique() function to make sure that we are not working with duplicates of a particular index. This applies if both the control and treatment have values of 0.

```{r}
# DEG threshold
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

```{r}
print(paste('There are',sum(up.ind),'upregulated genes using 2fc as the threshold.'))
```

Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
print(paste('There are',sum(down.ind),'downregulated genes using 2fc as the threshold.'))
```

Q10. Do you trust these results? Why or why not?

These results show trends but do not have accompanying statistical tests (not that statistical tests are the end-all-be-all either).

## DESeq2 Analysis

```{r}
library(DESeq2)
citation("DESeq2")
```

```{r}
# load data

dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
dds <- DESeq(dds)
res <- results(dds)
View(as.data.frame(res))
summary(res)
```

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

## Adding Annotation Data

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
# add symbol data

res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL", # The format of our genenames
                     column="SYMBOL", # The new format we want to add
                     multiVals="first")
head(res)
```

Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res\$entrez, res\$uniprot and res\$genename.

```{r}
# add entrez, uniprot, and genename data

res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="UNIPROT",
                     keytype="ENSEMBL",
                     multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

head(res)
```

```{r}
# arrange and view the results by adjusted p-value

ord <- order( res$padj )
head(res[ord,])
```

```{r}
# write to csv
write.csv(res[ord,], "deseq_results.csv")
```

## Data Visualization

```{r}
# volcano plot

# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
# enhanced volcano

BiocManager::install("EnhancedVolcano")

library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

## Pathway Analysis

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# run gage pathway analysis

keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
# make a pathway plot with our RNA-Seq expression results shown in color

pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```

Q12. Can you do the same procedure as above to plot the pathview figures for the top 2 down-reguled pathways?

```{r}
# Graft-versus-host disease (hsa05332)

pathview(gene.data=foldchanges, pathway.id="hsa05332")

# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa05332", kegg.native=FALSE)
```

```{r}
# Type I diabetes mellitus (hsa04940)

pathview(gene.data=foldchanges, pathway.id="hsa04940")

# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04940", kegg.native=FALSE)
```

## Plotting counts for genes of interest

```{r}
# gene ID is for the CRISPLD2 gene

i <- grep("CRISPLD2", res$symbol)
res[i,]
```

```{r}
# plot  counts where our intgroup is  dex column

plotCounts(dds, gene=rownames(res[i,]), intgroup="dex")
```

```{r}
# Return the data

d <- plotCounts(dds, gene="ENSG00000103196", intgroup="dex", returnData=TRUE)
head(d)
```

```{r}
ggplot(d, aes(dex, count, fill=dex)) + 
  geom_boxplot() + 
  scale_y_log10() + 
  ggtitle("CRISPLD2")
```
